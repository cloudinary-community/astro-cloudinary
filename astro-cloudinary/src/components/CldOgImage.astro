---
import type { CldImageProps } from "./CldImage.astro";
import { getCldOgImageUrl } from "../helpers/getCldOgImageUrl";
import { OG_IMAGE_WIDTH, OG_IMAGE_HEIGHT } from "../constants/sizes";

export type CldOgImageProps = CldImageProps & {
	excludeTags?: Array<string>;
	keys?: object;
	twitterTitle?: string;
};

interface Props extends CldOgImageProps {}

const {
	excludeTags = [],
	twitterTitle,
	keys = {},
	alt,
	...props
}: Props = Astro.props;

// We need to separately handle the width and the height to allow our user to pass in
// a custom value, but also we need to know this at the component level so that we can
// use it when rendering the meta tags
let { width = OG_IMAGE_WIDTH, height = OG_IMAGE_HEIGHT } = props;

// Normalize the width and height
width = typeof width === "string" ? Number.parseInt(width) : width;
height = typeof height === "string" ? Number.parseInt(height) : height;

// Render the final URLs. We use two different format versions to deliver
// webp for Twitter as it supports it (and we can control with tags) where
// other platforms may not support webp, so we deliver jpg
const ogImageUrl = getCldOgImageUrl({
	...Astro.props,
	width,
	height,
});

const twitterImageUrl = getCldOgImageUrl({
	...Astro.props,
	width,
	height,
	format: Astro.props.format || "webp",
});
---

<meta property="og:image" content={ogImageUrl} />
<meta property="og:image:secure_url" content={ogImageUrl} />
<meta property="og:image:width" content={String(OG_IMAGE_WIDTH)} />
<meta property="og:image:height" content={String(OG_IMAGE_HEIGHT)} />
<meta property="og:image:alt" content={alt} />
<meta property="twitter:title" content={twitterTitle} />
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content={twitterImageUrl} />